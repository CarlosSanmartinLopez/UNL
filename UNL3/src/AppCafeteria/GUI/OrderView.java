/*
 * Copyright (c) 2016 Stelliox.com.
 * 
 * This file is part of Stelliox.com.
 * 
 * This code can not be copied and/or distributed without the express
 * permission of Stelliox.com <ejemplo@stelliox.com>
 * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *    DEVELOPED BY STELLIOX.COM
 *    ECUADOR - LOJA - 2016
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
package AppCafeteria.GUI;

import AppCafeteria.Model.Client;
import AppCafeteria.Model.Inventory;
import AppCafeteria.Model.Order;
import AppCafeteria.Model.Table;
import AppCafeteria.Model.TableList;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Stelliox.com
 */
public class OrderView extends javax.swing.JPanel implements ActionListener {

    /**
     * Creates new form OrderView
     */
    JMenuItem menuItemAdd = new JMenuItem("AÃ±adir");
    JMenuItem menuItemEdit = new JMenuItem("Editar");
    JMenuItem menuItemRemove = new JMenuItem("Eliminar");
    InsertCantView cantView;
    public OrderView() {
        initComponents();
        
        JPopupMenu popupMenuTableInventory = new JPopupMenu();
                menuItemAdd.addActionListener(this);
        popupMenuTableInventory.add(menuItemAdd);
        
        jtblInventory.setComponentPopupMenu(popupMenuTableInventory);
        jtblInventory.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent event) {
                        Point point = event.getPoint();
                        int currentRow = jtblInventory.rowAtPoint(point);
                        jtblInventory.setRowSelectionInterval(currentRow, currentRow);
                    }
                });
        
        JPopupMenu popupMenuTableOrder = new JPopupMenu();
            menuItemEdit.addActionListener(this);
            menuItemRemove.addActionListener(this);
            
        popupMenuTableOrder.add(menuItemRemove);
            
        jtblOrder.setComponentPopupMenu(popupMenuTableOrder);
        jtblOrder.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent event) {
                        Point point = event.getPoint();
                        int currentRow = jtblOrder.rowAtPoint(point);
                        jtblOrder.setRowSelectionInterval(currentRow, currentRow);
                    }
                });
        
        loadInventory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtxtClient = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblInventory = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblOrder = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jtxtTotal = new javax.swing.JTextField();
        jbtnOrder = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jtxtTable = new javax.swing.JTextField();

        jLabel1.setText("Cliente");

        jtblInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Varlor", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblInventory);

        jtblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Valor", "Cantidad", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtblOrder);
        if (jtblOrder.getColumnModel().getColumnCount() > 0) {
            jtblOrder.getColumnModel().getColumn(0).setResizable(false);
            jtblOrder.getColumnModel().getColumn(1).setResizable(false);
            jtblOrder.getColumnModel().getColumn(2).setResizable(false);
            jtblOrder.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel2.setText("Total");

        jtxtTotal.setEditable(false);

        jbtnOrder.setText("Generar Pedido");
        jbtnOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbtnOrderMouseClicked(evt);
            }
        });

        jLabel3.setText("Mesa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jtxtClient, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jtxtTable, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbtnOrder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jtxtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtxtTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jbtnOrder)
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnOrderMouseClicked
        if(!jtxtClient.getText().isEmpty()) {
            if(!jtxtTable.getText().isEmpty()) {
                Order order = new Order(new Client(jtxtClient.getText()));
                    Inventory inventory = Inventory.getInstance();
                    for (int i = 0; i < jtblOrder.getRowCount(); i++) {
                        order.addProduct(
                                inventory.get((String)jtblOrder.getValueAt(i, 0)),
                                Integer.parseInt(jtblOrder.getValueAt(i, 2).toString())
                        );
                    }
                Table table = new Table(Integer.parseInt(jtxtTable.getText()), order);
                TableList tableList =TableList.getInstance();
                if(!tableList.add(table))
                    JOptionPane.showMessageDialog(this,"La mesa Esta Ocupada");
                else {
                    JOptionPane.showMessageDialog(this,"Orden Generada");
                    jtxtClient.setText("");
                    jtxtTable.setText("");
                    jtxtTotal.setText("");
                    
                    for (int i = 0; i < jtblOrder.getRowCount(); i++) {
                        try {
                            jtblOrder.remove(i);
                        } catch (Exception e) {
                        }
                    }
                    
                    ((DefaultTableModel)jtblOrder.getModel()).setRowCount(0);
                }
                    
            } else
                JOptionPane.showMessageDialog(this,"Ingresa la mesa");
        } else
            JOptionPane.showMessageDialog(this,"Ingresa el nobre del cliente");
    }//GEN-LAST:event_jbtnOrderMouseClicked
    
    private void loadInventory() {
        jtblInventory = AppCafeteria.Utilities.LoadTable.loadInventory(jtblInventory);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnOrder;
    private javax.swing.JTable jtblInventory;
    private javax.swing.JTable jtblOrder;
    private javax.swing.JTextField jtxtClient;
    private javax.swing.JTextField jtxtTable;
    private javax.swing.JTextField jtxtTotal;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        JMenuItem menu = (JMenuItem) event.getSource();
        if (menu == menuItemAdd) {
            String name = (String)jtblInventory.getValueAt(jtblInventory.getSelectedRow(), 0);
            double value = (Double)jtblInventory.getValueAt(jtblInventory.getSelectedRow(), 1);
            
            cantView = new InsertCantView(null, true);
            cantView.setNameProduct(name);
            cantView.setValueProduct(value+"");
            cantView.setCantMaxProduct(jtblInventory.getValueAt(jtblInventory.getSelectedRow(), 2).toString());
            
            cantView.setVisible(true);
            
            if(cantView.confirm == true) {
                int cant = Integer.parseInt(cantView.jtxtCant.getText());
                Inventory inventory = Inventory.getInstance();
                    inventory.remove(name, cant);
    
                DefaultTableModel modelTO = (DefaultTableModel)jtblOrder.getModel();
                modelTO.addRow(new Object[]{
                    name,
                    value,
                    cant
                });
            }
            
        } else 
        if(menu == menuItemRemove) {
            Inventory inventory = Inventory.getInstance();
            
            inventory.add( 
                    (String)jtblOrder.getValueAt(jtblOrder.getSelectedRow(), 0), 
                    (Integer)jtblOrder.getValueAt(jtblOrder.getSelectedRow(), 2));
            
            DefaultTableModel modelTO = (DefaultTableModel)jtblOrder.getModel();
                modelTO.removeRow(jtblOrder.getSelectedRow());
        }
        
        upData();
        calculateTotal();
    }  
    
    private void upData() {
        loadInventory();
    }
    
    private void calculateTotal() {
        double total = 0;
        double totalP;
        
        for (int i = 0; i < jtblOrder.getRowCount(); i++) {
            totalP = 0;
            totalP = Integer.parseInt(jtblOrder.getValueAt(i, 2).toString())
                        *
                     Double.parseDouble(jtblOrder.getValueAt(i, 1).toString());
            jtblOrder.setValueAt(totalP, i, 3);
            total += totalP;
        }
        jtxtTotal.setText(total+"");
    }
}
